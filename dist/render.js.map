{"version":3,"file":"render.js","sources":["../src/render.js","../src/update-attributes.js"],"sourcesContent":["import updateAttributes from './update-attributes'\r\n\r\nfunction render(array, mod = {}) {\r\n    const arr = [... array]\r\n    let res = ''\r\n    let arrLength = arr.length\r\n\r\n    for(let i=0; i< arrLength; i++) {\r\n        if(arr[i].var) {\r\n            if(!mod.var) continue;\r\n\r\n            if(mod.var[arr[i].var] || typeof(mod.var[arr[i].var]) == 'number') {\r\n                arr.splice(i+1, 0, ... mod.var[arr[i].var])\r\n                arrLength = arr.length\r\n            }\r\n            continue;\r\n        }\r\n        if(typeof(arr[i]) == 'string' || typeof(arr[i]) == 'number') {\r\n            res += arr[i]\r\n            continue;\r\n        } else if(arr[i][0][0] == '/'){\r\n            res += `<${arr[i][0]}>`\r\n            continue;\r\n        }\r\n\r\n        let attributesString = ''\r\n\r\n        if(arr[i][1]) {\r\n            let attributes = {... arr[i][1]}\r\n            if(attributes.attr && mod.attr) {\r\n                attributes = updateAttributes(attributes, mod.attr[attributes.attr])\r\n            }\r\n\r\n            const attrKeys = Object.keys(attributes)\r\n\r\n            attrKeys.forEach(attr => {\r\n                if(attr == 'style') {\r\n                    // remove empty spaces from style attribute\r\n                    attributes[attr] = attributes[attr].split(';')\r\n                                                       .map(el => el.trim())\r\n                                                       .join(';')\r\n                }\r\n\r\n                if(attr != 'attr') {\r\n                    attributesString += ` ${attr}=\"${attributes[attr]}\"`\r\n                }\r\n            })\r\n        }\r\n\r\n        res += `<${arr[i][0]}${attributesString}>`\r\n    }\r\n    \r\n    return res\r\n}\r\n\r\nexport default render","function updateAttributes(oldAttributes, newAttributes) {\r\n    const newKeys = Object.keys(newAttributes)\r\n\r\n    newKeys.forEach(key => {\r\n        if((key == 'class' || key == 'style') && oldAttributes[key]) {\r\n            oldAttributes[key] += ' ' + newAttributes[key]\r\n        }\r\n        else {\r\n            oldAttributes[key] = newAttributes[key]\r\n        }\r\n    })\r\n    return oldAttributes\r\n}\r\n\r\nexport default updateAttributes"],"names":["array","mod","arr","res","arrLength","length","i","splice","attributesString","oldAttributes","newAttributes","attributes","attr","Object","keys","forEach","key","split","map","el","trim","join"],"mappings":"8NAEA,SAAgBA,EAAOC,YAAAA,IAAAA,EAAM,IAKzB,IAJA,IAAMC,YAAWF,GACbG,EAAM,GACNC,EAAYF,EAAIG,OAEZC,EAAE,EAAGA,EAAGF,EAAWE,IACvB,GAAGJ,EAAII,OAAP,CACI,IAAIL,MAAS,UAEVA,MAAQC,EAAII,SAA0C,iBAAxBL,MAAQC,EAAII,WACzCJ,EAAIK,aAAJL,GAAWI,EAAE,EAAG,UAAOL,MAAQC,EAAII,UACnCF,EAAYF,EAAIG,aAIxB,GAAqB,iBAAXH,EAAII,IAAqC,iBAAXJ,EAAII,MAGlB,KAAhBJ,EAAII,GAAG,GAAG,IAKpB,IAAIE,EAAmB,GAEpBN,EAAII,GAAG,eACN,IC5BcG,EAAeC,ED4BzBC,OAAkBT,EAAII,GAAG,IAC1BK,EAAWC,MAAQX,EAAIW,OC7BZH,ED8BoBE,EC9BLD,ED8BiBT,EAAIW,KAAKD,EAAWC,MC7B1DC,OAAOC,KAAKJ,GAEpBK,QAAQ,SAAAC,GACD,SAAPA,GAAyB,SAAPA,IAAmBP,EAAcO,GAInDP,EAAcO,GAAON,EAAcM,GAHnCP,EAAcO,IAAQ,IAAMN,EAAcM,KDyBtCL,ECnBLF,GDsBkBI,OAAOC,KAAKH,GAEpBI,QAAQ,SAAAH,GACF,SAARA,IAECD,EAAWC,GAAQD,EAAWC,GAAMK,MAAM,KACNC,IAAI,SAAAC,UAAMA,EAAGC,SACbC,KAAK,MAGlC,QAART,IACCJ,OAAwBI,OAASD,EAAWC,aAKxDT,OAAWD,EAAII,GAAG,GAAKE,WA5BnBL,OAAWD,EAAII,GAAG,YAHlBH,GAAOD,EAAII,GAkCnB,OAAOH"}