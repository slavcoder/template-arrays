function e(){return(e=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function a(a,t){void 0===t&&(t={});for(var r=[].concat(a),n="",o=r.length,s=0;s<o;s++)if(r[s].var){if(!t.var)continue;(t.var[r[s].var]||"number"==typeof t.var[r[s].var])&&(r.splice.apply(r,[s+1,0].concat(t.var[r[s].var])),o=r.length)}else if("string"!=typeof r[s]&&"number"!=typeof r[s])if("/"!=r[s][0][0]){var i="";r[s][1]&&function(){var a,n,o=e({},r[s][1]);o.attr&&t.attr&&(a=o,n=t.attr[o.attr],Object.keys(n).forEach(function(e){"class"!=e&&"style"!=e||!a[e]?a[e]=n[e]:a[e]+=" "+n[e]}),o=a),Object.keys(o).forEach(function(e){"attr"!=e&&(i+=" "+e+'="'+o[e]+'"')})}(),n+="<"+r[s][0]+i+">"}else n+="<"+r[s][0]+">";else n+=r[s];return n}var t={author:"https://github.com/slavcoder",code:"https://github.com/slavcoder/template-arrays/tree/master/example",repo:"https://github.com/slavcoder/template-arrays"},r=[["nav",{class:"nav",id:"nav"}]].concat([["button",{class:"nav_hamburger hamburger"}],["span",{class:"hamburger_line"}],["/span"],["span",{class:"hamburger_line"}],["/span"],["span",{class:"hamburger_line"}],["/span"],["/button"]],[["ul",{class:"nav_menu menu"}],["li",{class:"menu_item"}],["a",{class:"menu_link",href:t.author}],"author",["/a"],["/li"],["li",{class:"menu_item"}],["a",{class:"menu_link",href:t.repo}],"project",["/a"],["/li"],["/ul"]],[["/nav"]]),n=[["main",{class:"main"}],["h1"],"Template arrays example of usage",["/h1"],["p"],"Check out the ",["a",{href:t.code}],"code",["/a"]," of this site",["/p"],["p"],"Check out template arrays ",["a",{href:t.repo}],"repo",["/a"],["/p"],["div",{class:"articlesContainer"}],["/div"]].concat([["div",{class:"spam"}],["select",{class:"spam_select -order"}],["option",{value:"random"}],"don't order colors",["/option"],["option",{value:"lightest"}],"order from lightest color",["/option"],["option",{value:"darkest"}],"order from darkest color",["/option"],["/select"],["select",{class:"spam_select -count"}],["option",{value:"10"}],"10 items",["/option"],["option",{value:"100"}],"100 items",["/option"],["option",{value:"1000"}],"1 000 items",["/option"],["option",{value:"5000"}],"5 000 items",["/option"],["option",{value:"10000"}],"10 000 items",["/option"],["/select"],["button",{class:"spam_button"}],"run spam test",["/button"],["div",{class:"spam_container",style:"\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n    "}],["/div"],["/div"]],[["/main"]]),o={var:{year:(new Date).getFullYear(),img2:[["img",{src:"https://placekitten.com/200/300",class:"footer_img"}]],cats:[["div",{class:"footer_imgContainer"}],["p",{class:"footer_paragraph"}],"cute cat images inside div from ",["a",{href:"https://placekitten.com"}],"placekitten.com",["/a"],["/p"],{var:"img1"},{var:"img2"},["/div"],{var:"notDefinedVar"},{var:"loop"}],img1:[["img",{src:"https://placekitten.com/g/200/300",class:"footer_img"}]]}},s=[["article",{class:"article"}],["h2",{class:"article_heading"}],{var:"title"},["/h2"],["div",{class:"article_content"}],{var:"content"},["/div"],["/article"]];function i(e){return Math.floor(Math.random()*e)}var l,c,p,m,u,d,h,v,g=[["span",{attr:"spam"}],{var:"random"},["/span"]];l=a(r)+a(n)+a([["footer",{class:"footer"}],{var:"cats"},["p",{class:"footer_paragraph"}],"slavcoder &copy; ",{var:"year"},["/p"],["/footer"]],o),document.body.innerHTML=l,c=[{title:"What are template arrays?",author:"slavcoder",content:[["p",{class:"paragraph"}],"This is an experimental concept of rendering HTML by JavaScript arrays. I believe it may be useful in some JavaScript libraries or maybe even for a simple templates like in this example.",["/p"],["h3"],"How it works?",["/h3"],["p"],"The idea is simple. Let's look right into example. A template array could look like this:",["pre"],"const exampleArray = [\n","    ['h1', {attr:'heading', id:'heading'}],\n","        'heading text',\n","    ['/h1'],\n","    ['div'],\n","        ['p', {class:'paragraph'}],\n","            {var:'paragraph'},\n","        ['/p'],\n","        ['a', {href:'#'}],`link text`,['a'],\n","    ['/div']\n","]",["/pre"],["/p"],["p",{class:"paragraph"}],"As you can see, it is a valid JavaScript array.",["/p"],["p",{class:"paragraph"}],"HTML tags are represented by opening tag name plus list of its attributes <code>['h1', {id:'heading'}]</code>, and the closing tag name <code>['/h1']</code>",["/p"],["p",{class:"paragraph"}],"Text is presented by simple 'string' or `template string`",["/p"],["p",{class:"paragraph"}],"Object literals are used as variables <code>{var:'paragraph'}</code>. Each time you render new HTML by using template arrays you can easily put another template array or plain text in place of this literals.",["/p"],["p",{class:"paragraph"}],"Even though it may look more complicated than template strings, I think it gives more flexibility and clarity.",["/p"],["p",{class:"paragraph"}],"The render function which you have to import takes two arguments: array and object. Rendering the example above could look like this:<br>",["/p"],["pre"],"document.body.innerHTML = render(exampleArray, {\n","    attr: {\n","        heading: {\n","            class: 'heading',\n","            style: 'color: red;'\n","        }\n","    },\n","    var: {\n","        paragraph: [ ['span'],'lorem',['/span'] ]\n","    }\n","})",["/pre"],["p",{class:"paragraph"}],"The <b>attr</b> is used to update attributes and the <b>var</b> is used to insert some other template array or string.",["/p"]]},{title:"Advanteges of template arrays",author:"slavcoder",content:[["p"],'"Using arrays to render HTML? Is there a doctor in this file?"',["p"],["p"],"<b>Advanteges:</b>",["p"],["ul",{class:"paragraph"}],["li"],"you can use it inside .json file (this article is an example of it) and still use <b>var</b> and <b>attr</b> to change parts of its content and attributes of elements just before render HTML",["li"],"easy to use - no need function for every template, <b>template arrays</b> are ready to use after you define them",["/li"],["li"],"easy to learn, it is basicly <b>HTML</b> inside arrays",["li"],"it is pretty fast way to create HTML inside JavaScript ",["/li"],["/ul"],["p"],"<b>Let's render some elements!</b><br>Spam test:",["/p"],["ul"],["li"],"up to <b>10 000</b> span elements",["/li"],["li"],"each element have random background color",["/li"],["li"],"you can generate elements in an order from lightest to darkest and vice versa",["/li"],["li"],"you can check rendering time in console (It depends on your machine. It can be also much faster without this ridiculous color calculations I made)",["/li"],["/ul"]]}],p=document.querySelector(".articlesContainer"),m="",c.forEach(function(e){m+=a(s,{var:{title:e.title,content:e.content}})}),p.innerHTML=m,v=document.querySelector(".menu"),document.querySelector(".hamburger").addEventListener("click",function(e){v.classList.toggle("-active")}),u=document.querySelector(".spam_container"),d=document.querySelector(".spam_select.-count"),h=document.querySelector(".spam_select.-order"),document.querySelector(".spam_button").addEventListener("click",function(){!function(e,t){console.time("show "+e+" spam elements");for(var r="",n=function(e){var n=i(255),o=i(255),s=i(255),l=n+o+s,c="rgb("+n+","+o+","+s+")";r+=a(g,{var:{random:e},attr:{spam:{style:"\n                            background-color: "+c+";\n                            color: "+(l<320?"white":"black")+";\n                            order: "+{random:function(){return 0},darkest:function(){return l},lightest:function(){return 1e3-l}}[t]()+";\n                        ",id:"spam-"+e,title:c}}})},o=1;o<=e;o++)n(o);u.innerHTML=r,console.timeEnd("show "+e+" spam elements")}(d.value,h.value)});
//# sourceMappingURL=index.js.map
